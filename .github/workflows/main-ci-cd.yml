name: User-Service CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_and_test:
    name: Build, Test & Analyze
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 2. Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
      - name: 3. Build, Verify and Analyze with SonarQube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./mvnw -B clean verify sonar:sonar -Dsonar.host.url=http://localhost:9000
      - name: 4. Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: user-service-jar
          path: target/user-0.0.1-SNAPSHOT.jar

  build_and_push_image:
    name: Build and Push Docker Image
    needs: build_and_test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout Code
        uses: actions/checkout@v4
      - name: 2. Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: user-service-jar
          path: target
      - name: 3. Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: 4. Log in to Azure Container Registry
        # Bu adım Docker'ın ACR'da oturum açmasını sağlar.
        uses: azure/docker-login@v1
        with:
          login-server: twekerregistry.azurecr.io
      - name: 5. Build and Push Docker Image to ACR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            twekerregistry.azurecr.io/user-service:latest
            twekerregistry.azurecr.io/user-service:${{ github.sha }}

  deploy_to_aks:
    name: Deploy to AKS
    needs: build_and_push_image
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout Code
        uses: actions/checkout@v4
      - name: 2. Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: 3. Set up AKS context for kubectl
        uses: azure/aks-set-context@v4
        with:
          cluster-name: 'tweker-aks'
          resource-group: 'tweker-rg'
      - name: 4. Deploy to AKS
        run: |
          echo "Deploying to AKS cluster..."
          kubectl set image deployment/user-service user-service=twekerregistry.azurecr.io/user-service:${{ github.sha }}
          kubectl apply -f tweker-k8s/